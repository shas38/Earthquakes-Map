{"version":3,"sources":["InfoTable.tsx","InfoPane.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["PriceTable","props","location","console","log","react_default","a","createElement","Table_default","striped","bordered","hover","variant","colSpan","properties","place","dist_default","date","time","geometry","coordinates","tsunami","mag","locations","map","key","id","EarthMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","GetEarthquakes","_ref","asyncToGenerator","regenerator_default","mark","_callee","URL","data","wrap","_context","prev","next","fetch","sent","json","setState","features","currentLocations","stop","_x","apply","arguments","setSelectedLocation","selectedLocation","React","createRef","_this2","className","Container_default","lib","ref","defaultZoom","defaultCenter","lat","lng","onBoundsChanged","ne","getBounds","getNorthEast","sw","getSouthWest","newLocations","filter","position","onClick","onCloseClick","InfoTable","InfoPane","Component","WrappedMap","withScriptjs","withGoogleMap","Boolean","window","hostname","match","ReactDOM","render","style","width","height","googleMapURL","concat","process","loadingElement","containerElement","mapElement","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f334645.chunk.js","sourcesContent":["// Import necessary libraries\r\nimport React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\n// Functional component for dispaying the info\r\nconst PriceTable = (props: any) => {\r\n    const location = props.location;\r\n    console.log(location)\r\n    return (\r\n      <div>\r\n        <Table striped bordered hover variant=\"dark\">\r\n          <tbody>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Location</b>\r\n                </td>\r\n                <td>\r\n                  {location.properties.place}\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Time</b>\r\n                </td>\r\n                <td>\r\n                    <Moment date={location.properties.time} />\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Latitude</b>\r\n                </td>\r\n                <td>\r\n                    {location.geometry.coordinates[1]}\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Longitude</b>\r\n                </td>\r\n                <td>\r\n                    {location.geometry.coordinates[0]}\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Depth</b>\r\n                </td>\r\n                <td>\r\n                    {location.geometry.coordinates[2]}\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Tsunami</b>\r\n                </td>\r\n                <td>\r\n                    {location.properties.tsunami}\r\n                </td> \r\n            </tr>\r\n            <tr>\r\n                <td colSpan={2}>\r\n                  <b>Magnitude </b>\r\n                </td>\r\n                <td>\r\n                    {location.properties.mag}\r\n                </td> \r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    )\r\n  }\r\n  // Export the component as the default object\r\n  export default PriceTable;","// Import necessary libraries\r\nimport React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\n// Functional component for dispaying the info\r\nconst PriceTable = (props: any) => {\r\n    // Get all the cinema names\r\n    const locations = props.locations;\r\n    return (\r\n\r\n    <ul>\r\n        {locations.map((location: any)=>(\r\n            <li key={location.id}>\r\n            {location.properties.place}\r\n            </li>\r\n        ))}\r\n    </ul>\r\n\r\n    )\r\n  }\r\n  // Export the component as the default object\r\n  export default PriceTable;","import Container from 'react-bootstrap/Container'\nimport './App.css';\nimport React, { Component } from \"react\";\n\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n} from \"react-google-maps\";\n\nimport InfoTable from './InfoTable';\nimport InfoPane from './InfoPane';\n\n// Main class for combining all the components\nclass EarthMap extends Component {\n  state: any\n  map: any\n  constructor(props: any){\n    super(props)\n    this.map = React.createRef();\n    this.state= {\n      locations: [],\n      currentLocations: [],\n      selectedLocation: null,\n    };\n  }\n\n\n  async componentDidMount () {\n    const URL = 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson'\n    this.GetEarthquakes(URL);\n  }\n\n  GetEarthquakes = async (URL: string) =>{\n\n    let data: any = await fetch(URL);\n    data = await data.json();\n    this.setState({locations: data.features, currentLocations: data.features}, () => console.log(this.state.locations));\n    \n  }\n\n  setSelectedLocation = (location: object) => this.setState({selectedLocation: location});\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Container>\n            <GoogleMap\n              ref={map => {\n                this.map = map;\n              }}\n              defaultZoom={3}\n              defaultCenter={{ lat: 45.4211, lng: -75.6903 }}\n              onBoundsChanged={() => {\n                \n                let ne = this.map.getBounds().getNorthEast();\n                let sw = this.map.getBounds().getSouthWest();\n\n                let newLocations = this.state.locations.filter((location: any) => {\n                  const lat = location.geometry.coordinates[1];\n                  const lng = location.geometry.coordinates[0];\n\n                  return lng < ne.lng() && lng > sw.lng() && lat > sw.lat() && lat > sw.lat()\n                })\n                console.log(ne.lng())\n                console.log(sw.lng())\n                console.log(ne.lat())\n                console.log(ne.lat())\n\n                this.setState({currentLocations: newLocations})\n\n              }}\n\n            >\n              {this.state.currentLocations.map((location: any) => (\n                <Marker\n                  key={location.id}\n                  position={{ \n                     lat: location.geometry.coordinates[1],\n                     lng: location.geometry.coordinates[0] \n                    }}\n                  onClick={() => this.setState({selectedLocation: location})}\n                />  \n                \n              ))}\n              {\n                this.state.selectedLocation && (\n                  <InfoWindow\n                    position={{\n                      lat: this.state.selectedLocation.geometry.coordinates[1],\n                      lng: this.state.selectedLocation.geometry.coordinates[0] \n                    }}\n                    onCloseClick={() => this.setState({selectedLocation: null})}\n                  >\n                    <InfoTable\n                      location={this.state.selectedLocation}\n                    />\n                  </InfoWindow>\n                )\n              }\n\n            </GoogleMap> \n\n              \n              <InfoPane\n                locations={this.state.currentLocations}\n              />\n\n\n                  \n          </Container>\n\n      </div>\n    );\n  }\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(EarthMap));\n\nexport default function App(){\n  return(\n    <div style={{ width: \"98vw\", height: \"80vh\" }}>\n      <WrappedMap\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n        loadingElement={<div style={{ height: `100%`}} />}\n        containerElement={<div style={{ height: `100%`}} />}\n        mapElement={<div style={{ height: `100%`}} />}\n      />\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}